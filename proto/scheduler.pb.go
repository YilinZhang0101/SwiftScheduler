// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.33.0
// source: proto/scheduler.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --- Worker -> Master ---
type WorkerMessage struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	WorkerId string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*WorkerMessage_RegisterRequest
	//	*WorkerMessage_StatusUpdate
	Payload       isWorkerMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerMessage) Reset() {
	*x = WorkerMessage{}
	mi := &file_proto_scheduler_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerMessage) ProtoMessage() {}

func (x *WorkerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerMessage.ProtoReflect.Descriptor instead.
func (*WorkerMessage) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerMessage) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerMessage) GetPayload() isWorkerMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WorkerMessage) GetRegisterRequest() *RegisterRequest {
	if x != nil {
		if x, ok := x.Payload.(*WorkerMessage_RegisterRequest); ok {
			return x.RegisterRequest
		}
	}
	return nil
}

func (x *WorkerMessage) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		if x, ok := x.Payload.(*WorkerMessage_StatusUpdate); ok {
			return x.StatusUpdate
		}
	}
	return nil
}

type isWorkerMessage_Payload interface {
	isWorkerMessage_Payload()
}

type WorkerMessage_RegisterRequest struct {
	RegisterRequest *RegisterRequest `protobuf:"bytes,2,opt,name=register_request,json=registerRequest,proto3,oneof"` // Sent on startup
}

type WorkerMessage_StatusUpdate struct {
	StatusUpdate *StatusUpdate `protobuf:"bytes,3,opt,name=status_update,json=statusUpdate,proto3,oneof"` // Sent on task completion or for heartbeats
}

func (*WorkerMessage_RegisterRequest) isWorkerMessage_Payload() {}

func (*WorkerMessage_StatusUpdate) isWorkerMessage_Payload() {}

type RegisterRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Hostname       string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	MaxConcurrency int32                  `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"` // The max number of tasks this worker can run
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_proto_scheduler_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterRequest) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

type StatusUpdate struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ActiveTaskCount int32                  `protobuf:"varint,1,opt,name=active_task_count,json=activeTaskCount,proto3" json:"active_task_count,omitempty"` // Current number of tasks being processed
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_proto_scheduler_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *StatusUpdate) GetActiveTaskCount() int32 {
	if x != nil {
		return x.ActiveTaskCount
	}
	return 0
}

// --- Master -> Worker ---
type MasterMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MasterMessage_RegisterResponse
	//	*MasterMessage_TaskAssignment
	Payload       isMasterMessage_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterMessage) Reset() {
	*x = MasterMessage{}
	mi := &file_proto_scheduler_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterMessage) ProtoMessage() {}

func (x *MasterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterMessage.ProtoReflect.Descriptor instead.
func (*MasterMessage) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *MasterMessage) GetPayload() isMasterMessage_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MasterMessage) GetRegisterResponse() *RegisterResponse {
	if x != nil {
		if x, ok := x.Payload.(*MasterMessage_RegisterResponse); ok {
			return x.RegisterResponse
		}
	}
	return nil
}

func (x *MasterMessage) GetTaskAssignment() *TaskAssignment {
	if x != nil {
		if x, ok := x.Payload.(*MasterMessage_TaskAssignment); ok {
			return x.TaskAssignment
		}
	}
	return nil
}

type isMasterMessage_Payload interface {
	isMasterMessage_Payload()
}

type MasterMessage_RegisterResponse struct {
	RegisterResponse *RegisterResponse `protobuf:"bytes,1,opt,name=register_response,json=registerResponse,proto3,oneof"` // Confirms registration
}

type MasterMessage_TaskAssignment struct {
	TaskAssignment *TaskAssignment `protobuf:"bytes,2,opt,name=task_assignment,json=taskAssignment,proto3,oneof"` // Pushes a new task to the worker
}

func (*MasterMessage_RegisterResponse) isMasterMessage_Payload() {}

func (*MasterMessage_TaskAssignment) isMasterMessage_Payload() {}

type RegisterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_proto_scheduler_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TaskAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        string                 `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskName      string                 `protobuf:"bytes,2,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`
	TaskPayload   []byte                 `protobuf:"bytes,3,opt,name=task_payload,json=taskPayload,proto3" json:"task_payload,omitempty"` // The serialized task arguments
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	mi := &file_proto_scheduler_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_scheduler_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_proto_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *TaskAssignment) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAssignment) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

func (x *TaskAssignment) GetTaskPayload() []byte {
	if x != nil {
		return x.TaskPayload
	}
	return nil
}

var File_proto_scheduler_proto protoreflect.FileDescriptor

const file_proto_scheduler_proto_rawDesc = "" +
	"\n" +
	"\x15proto/scheduler.proto\x12\tscheduler\"\xc0\x01\n" +
	"\rWorkerMessage\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12G\n" +
	"\x10register_request\x18\x02 \x01(\v2\x1a.scheduler.RegisterRequestH\x00R\x0fregisterRequest\x12>\n" +
	"\rstatus_update\x18\x03 \x01(\v2\x17.scheduler.StatusUpdateH\x00R\fstatusUpdateB\t\n" +
	"\apayload\"V\n" +
	"\x0fRegisterRequest\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12'\n" +
	"\x0fmax_concurrency\x18\x02 \x01(\x05R\x0emaxConcurrency\":\n" +
	"\fStatusUpdate\x12*\n" +
	"\x11active_task_count\x18\x01 \x01(\x05R\x0factiveTaskCount\"\xac\x01\n" +
	"\rMasterMessage\x12J\n" +
	"\x11register_response\x18\x01 \x01(\v2\x1b.scheduler.RegisterResponseH\x00R\x10registerResponse\x12D\n" +
	"\x0ftask_assignment\x18\x02 \x01(\v2\x19.scheduler.TaskAssignmentH\x00R\x0etaskAssignmentB\t\n" +
	"\apayload\"F\n" +
	"\x10RegisterResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"i\n" +
	"\x0eTaskAssignment\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\tR\x06taskId\x12\x1b\n" +
	"\ttask_name\x18\x02 \x01(\tR\btaskName\x12!\n" +
	"\ftask_payload\x18\x03 \x01(\fR\vtaskPayload2U\n" +
	"\x10SchedulerService\x12A\n" +
	"\aConnect\x12\x18.scheduler.WorkerMessage\x1a\x18.scheduler.MasterMessage(\x010\x01B0Z.github.com/YilinZhang0101/SwiftScheduler/protob\x06proto3"

var (
	file_proto_scheduler_proto_rawDescOnce sync.Once
	file_proto_scheduler_proto_rawDescData []byte
)

func file_proto_scheduler_proto_rawDescGZIP() []byte {
	file_proto_scheduler_proto_rawDescOnce.Do(func() {
		file_proto_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_scheduler_proto_rawDesc), len(file_proto_scheduler_proto_rawDesc)))
	})
	return file_proto_scheduler_proto_rawDescData
}

var file_proto_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_scheduler_proto_goTypes = []any{
	(*WorkerMessage)(nil),    // 0: scheduler.WorkerMessage
	(*RegisterRequest)(nil),  // 1: scheduler.RegisterRequest
	(*StatusUpdate)(nil),     // 2: scheduler.StatusUpdate
	(*MasterMessage)(nil),    // 3: scheduler.MasterMessage
	(*RegisterResponse)(nil), // 4: scheduler.RegisterResponse
	(*TaskAssignment)(nil),   // 5: scheduler.TaskAssignment
}
var file_proto_scheduler_proto_depIdxs = []int32{
	1, // 0: scheduler.WorkerMessage.register_request:type_name -> scheduler.RegisterRequest
	2, // 1: scheduler.WorkerMessage.status_update:type_name -> scheduler.StatusUpdate
	4, // 2: scheduler.MasterMessage.register_response:type_name -> scheduler.RegisterResponse
	5, // 3: scheduler.MasterMessage.task_assignment:type_name -> scheduler.TaskAssignment
	0, // 4: scheduler.SchedulerService.Connect:input_type -> scheduler.WorkerMessage
	3, // 5: scheduler.SchedulerService.Connect:output_type -> scheduler.MasterMessage
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_scheduler_proto_init() }
func file_proto_scheduler_proto_init() {
	if File_proto_scheduler_proto != nil {
		return
	}
	file_proto_scheduler_proto_msgTypes[0].OneofWrappers = []any{
		(*WorkerMessage_RegisterRequest)(nil),
		(*WorkerMessage_StatusUpdate)(nil),
	}
	file_proto_scheduler_proto_msgTypes[3].OneofWrappers = []any{
		(*MasterMessage_RegisterResponse)(nil),
		(*MasterMessage_TaskAssignment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_scheduler_proto_rawDesc), len(file_proto_scheduler_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_scheduler_proto_goTypes,
		DependencyIndexes: file_proto_scheduler_proto_depIdxs,
		MessageInfos:      file_proto_scheduler_proto_msgTypes,
	}.Build()
	File_proto_scheduler_proto = out.File
	file_proto_scheduler_proto_goTypes = nil
	file_proto_scheduler_proto_depIdxs = nil
}
